---

# file: roles/fubarhouse.pm2/tasks/pm2.yml

- name: "PM2 | Ensure installed"
  become: yes
  become_user: root
  npm:
    name: "{{ item }}"
    executable: "{{ fubarhouse_npm.npm_install_exec }}"
    global: yes
  with_items:
    - "pm2"

- name: "PM2 | Define executable"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  set_fact:
    pm2_exec: "{{ fubarhouse_pm2.user_dir }}/.nvm/v{{ node_version }}/bin/pm2"
  when: pm2_exec is not defined

- name: "PM2 | Checking folders"
  become: yes
  become_user: root
  file:
    state: directory
    path: "{{ item.location }}"
    owner: "{{ fubarhouse_user }}"
    recurse: yes
  with_items: "{{ node_apps }}"
  when: node_apps.0 is defined

- name: "PM2 | Ensure repositories are up to date"
  become: no
  become_user: "{{ fubarhouse_user }}"
  git:
    repo: "{{ item.repository }}"
    dest: "{{ item.location }}"
    clone: yes
    update: yes
    force: yes
    accept_hostkey: yes
    version: master
  with_items: "{{ node_apps }}"
  when: node_apps.0 is defined

- name: "PM2 | Ensure application(s) are installed"
  become: yes
  become_user: "root"
  raw: "{{ fubarhouse_npm.npm_install_exec }} install --prefix {{ item.location }}"
  with_items: "{{ node_apps }}"
  when: node_apps.0 is defined

- name: PM2 | Copying configuration file when asked
  become: yes
  become_user: root
  copy:
    remote_src: yes
    src: "{{ item.location }}/{{ item.config.origin }}"
    dest: "{{ item.location }}/{{ item.config.destination }}"
    owner: "{{ fubarhouse_user }}"
  with_items: "{{ node_apps }}"
  when: item.config is defined and node_apps.0 is defined

- name: PM2 | Create databases when requested
  become: yes
  become_user: "root"
  mysql_db:
    name: "{{ item.database.name }}"
    collation: "utf8_general_ci"
    encoding: "utf8"
    state: present
  with_items: "{{ node_apps }}"
  when: item.database.name is defined and node_apps.0 is defined

- name: PM2 | Import database if provided
  become: yes
  become_user: "root"
  mysql_db:
    state: import
    name: "{{ item.database.name }}"
    target: "{{ item.location }}/{{ item.database.file }}"
  with_items: "{{ node_apps }}"
  when: item.database.file is defined and node_apps.0 is defined

- name: PM2 | Run initialization scripts"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ fubarhouse_npm.nvm_symlink_exec }} run v{{ node_version }} {{ item.location }}/{{ item.init }}"
  with_items: "{{ node_apps }}"
  when: item.init is defined and node_apps.0 is defined

- name: "PM2 | Ensure started"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  raw: "{{ pm2_exec }} start {{ item.location }}/{{ item.start }} --name '{{ item.name }}'"
  with_items: "{{ node_apps }}"
  ignore_errors: yes
  when: node_apps.0 is defined

- name: "PM2 | Flush logs"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  raw: "{{ pm2_exec }} flush"
  when: node_apps.0 is defined

- name: "PM2 | Waiting for applications to load"
  wait_for:
    port: "{{ item.port }}"
    delay: 5
  with_items: "{{ node_apps }}"
  when: node_apps.0 is defined

- name: PM2 | Get status"
  uri:
    url: "http://127.0.0.1:{{ item.port }}"
    status_code: 200
  with_items: "{{ node_apps }}"
  retries: 5
  delay: 5
  ignore_errors: yes
  when: node_apps.0 is defined

- name: "PM2 | Reloading applications"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  raw: "{{ pm2_exec }} reload '{{ item.name }}'"
  with_items: "{{ node_apps }}"
  ignore_errors: yes
  when: node_apps.0 is defined

- name: "PM2 | Importing tasks for Apache"
  include: "vhost-apache.yml"
  when: apache2_isinstalled is defined

- name: "PM2 | Importing tasks for Nginx"
  include: "vhost-nginx.yml"
  when: nginx_isinstalled is defined
